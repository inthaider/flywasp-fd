window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.RNN_Implementation", "modulename": "src.RNN_Implementation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess", "modulename": "src.data_preprocess", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.feature_engineering", "modulename": "src.data_preprocess.feature_engineering", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.feature_engineering.logger", "modulename": "src.data_preprocess.feature_engineering", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.data_preprocess.feature_engineering (WARNING)&gt;"}, {"fullname": "src.data_preprocess.feature_engineering.FeatureEngineer", "modulename": "src.data_preprocess.feature_engineering", "qualname": "FeatureEngineer", "kind": "class", "doc": "<p>A class for performing feature engineering on a Pandas DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pandas.DataFrame):\nThe DataFrame to perform feature engineering on.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>df</strong> (pandas.DataFrame):\nThe DataFrame to perform feature engineering on.</li>\n<li><strong>scaler</strong> (sklearn.preprocessing.StandardScaler):\nThe scaler object used to standardize the features.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>standardize_features(columns_to_scale)\n    Standardizes the specified columns in the DataFrame.\nengineer_features()\n    Performs feature engineering steps on the DataFrame.</p>\n"}, {"fullname": "src.data_preprocess.feature_engineering.FeatureEngineer.__init__", "modulename": "src.data_preprocess.feature_engineering", "qualname": "FeatureEngineer.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the FeatureEngineer class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pandas.DataFrame, optional):\nThe DataFrame to perform feature engineering on.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.data_preprocess.feature_engineering.FeatureEngineer.df", "modulename": "src.data_preprocess.feature_engineering", "qualname": "FeatureEngineer.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.feature_engineering.FeatureEngineer.scaler", "modulename": "src.data_preprocess.feature_engineering", "qualname": "FeatureEngineer.scaler", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.feature_engineering.FeatureEngineer.standardize_features", "modulename": "src.data_preprocess.feature_engineering", "qualname": "FeatureEngineer.standardize_features", "kind": "function", "doc": "<p>Standardizes the specified columns in the DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>columns_to_scale</strong> (list of str):\nThe names of the columns to standardize.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns_to_scale</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.feature_engineering.FeatureEngineer.engineer_features", "modulename": "src.data_preprocess.feature_engineering", "qualname": "FeatureEngineer.engineer_features", "kind": "function", "doc": "<p>Performs feature engineering steps on the DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.preprocessing", "modulename": "src.data_preprocess.preprocessing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.preprocessing.logger", "modulename": "src.data_preprocess.preprocessing", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.data_preprocess.preprocessing (WARNING)&gt;"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor", "kind": "class", "doc": "<p>A class for preprocessing a Pandas DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pandas.DataFrame, optional):\nThe DataFrame to preprocess.</li>\n<li><strong>pickle_path</strong> (str, optional):\nThe path to a pickled DataFrame to load.</li>\n<li><strong>raw_data_id</strong> (str, optional):\nThe name/ID of the raw data.</li>\n<li><strong>save_data</strong> (bool, optional):\nWhether to save the processed data to a pickled file. Defaults to False.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>df</strong> (pandas.DataFrame):\nThe DataFrame to preprocess. Defaults to None.</li>\n<li><strong>pickle_path</strong> (str):\nThe path to a pickled DataFrame to load. Defaults to None.</li>\n<li><strong>raw_data_id</strong> (str):\nThe name/ID of the raw data. Defaults to \"ff-mw\".</li>\n<li><strong>save_data</strong> (bool):\nWhether to save the processed data to a pickled file. Defaults to False.</li>\n<li><strong>raw_data_path</strong> (str):\nThe path to the raw data. Defaults to None.</li>\n<li><strong>interim_data_path</strong> (str):\nThe path to the interim data. Defaults to pickle_path.</li>\n<li><strong>processed_data_path</strong> (str):\nThe path to the processed data. Defaults to None.</li>\n<li><strong>timestamp</strong> (str):\nThe timestamp of the current time in the format YYYYMMDD_HHMM.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>load_data()\n    Loads the DataFrame from a pickled file.\nsave_processed_data()\n    Saves the processed data to a pickled file.\ndrop_columns(columns_to_drop)\n    Drops the specified columns from the DataFrame.\nspecific_rearrange(col_to_move, ref_col)\n    Moves a column to be immediately after a reference column.\nrearrange_columns(cols_order)\n    Rearranges the columns of the DataFrame according to the specified order.\ncalculate_means(column_pairs, new_columns)\n    Calculates the means of pairs of columns and adds the results as new columns.\nadd_labels(condition_columns, new_column)\n    Adds a new column based on conditions of existing columns.\nhandle_infinity_and_na()\n    Replaces infinite and NaN values in the DataFrame with NaN.\npreprocess_data()\n    Performs preprocessing steps on the DataFrame.</p>\n"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.__init__", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.__init__", "kind": "function", "doc": "<p>Initializes a new instance of the DataPreprocessor class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pandas.DataFrame, optional):\nThe DataFrame to preprocess.</li>\n<li><strong>pickle_path</strong> (str, optional):\nThe path to a pickled DataFrame to load.</li>\n<li><strong>raw_data_id</strong> (str, optional):\nThe name/ID of the raw data.</li>\n<li><strong>save_data</strong> (bool, optional):\nWhether to save the processed data to a pickled file. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pickle_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_data_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ff-mw&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.df", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.pickle_path", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.pickle_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.raw_data_id", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.raw_data_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.save_data", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.save_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.raw_data_path", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.raw_data_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.interim_data_path", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.interim_data_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.processed_data_path", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.processed_data_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.timestamp", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.timestamp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.load_data", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.load_data", "kind": "function", "doc": "<p>Loads the DataFrame from a pickled file.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: The loaded DataFrame.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.save_processed_data", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.save_processed_data", "kind": "function", "doc": "<p>Saves the processed data to a pickled file.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The path to the saved pickled file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.drop_columns", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.drop_columns", "kind": "function", "doc": "<p>Drops the specified columns from the DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>columns_to_drop</strong> (list of str):\nThe names of the columns to drop.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">columns_to_drop</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.specific_rearrange", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.specific_rearrange", "kind": "function", "doc": "<p>Moves a column to be immediately after a reference column.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>col_to_move</strong> (str):\nThe name of the column to move.</li>\n<li><strong>ref_col</strong> (str):\nThe name of the reference column.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">col_to_move</span>, </span><span class=\"param\"><span class=\"n\">ref_col</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.rearrange_columns", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.rearrange_columns", "kind": "function", "doc": "<p>Rearranges the columns of the DataFrame according to the specified order.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>cols_order</strong> (list of str):\nThe desired order of the columns.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cols_order</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.calculate_means", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.calculate_means", "kind": "function", "doc": "<p>Calculates the means of pairs of columns and adds the results as new columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>column_pairs</strong> (list of list of str):\nThe pairs of column names to calculate the means of.</li>\n<li><strong>new_columns</strong> (list of str):\nThe names of the new columns to add.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_pairs</span>, </span><span class=\"param\"><span class=\"n\">new_columns</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.add_labels", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.add_labels", "kind": "function", "doc": "<p>Adds a new column based on conditions of existing columns.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>condition_columns</strong> (list of str):\nThe names of the columns to use as conditions.</li>\n<li><strong>new_column</strong> (str):\nThe name of the new column to add.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">condition_columns</span>, </span><span class=\"param\"><span class=\"n\">new_column</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.handle_infinity_and_na", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.handle_infinity_and_na", "kind": "function", "doc": "<p>Replaces infinite and NaN values in the DataFrame with forward/backward filled values.</p>\n\n<p>TODO: Do we need the df.reset_index(drop=True) line?\nTODO: Implement forward and backward filling.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.preprocessing.DataPreprocessor.preprocess_data", "modulename": "src.data_preprocess.preprocessing", "qualname": "DataPreprocessor.preprocess_data", "kind": "function", "doc": "<p>Performs preprocessing steps on the DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>save_data</strong> (bool, optional):\nWhether to save the processed data to a pickled file. Defaults to None, in which case the value of self.save_data is used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: The preprocessed DataFrame.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.rnn_data_prep", "modulename": "src.data_preprocess.rnn_data_prep", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.logger", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.data_preprocess.rnn_data_prep (WARNING)&gt;"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep", "kind": "class", "doc": "<p>A class for preparing data for an RNN model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pickle_path</strong> (str, optional):\nThe path to the .pkl file containing the raw data. Defaults to 'data/interim/ff-mw.pkl'.</li>\n<li><strong>train_test_data_par_dir</strong> (str, optional):\nThe path to the directory containing the .pkl files. Defaults to 'data/processed/rnn_input/'.</li>\n<li><strong>save_train_test</strong> (bool, optional):\nWhether to save the train and test datasets as .pkl files. Defaults to False.</li>\n<li><strong>save_data</strong> (bool, optional):\nWhether to save the processed data as a .pkl file. Defaults to False.</li>\n</ul>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>pickle_path</strong> (str):\nThe path to the .pkl file containing the raw data.</li>\n<li><strong>train_test_data_par_dir</strong> (str):\nThe path to the directory containing the .pkl files.</li>\n<li><strong>save_train_test</strong> (bool):\nWhether to save the train and test datasets as .pkl files.</li>\n<li><strong>save_data</strong> (bool):\nWhether to save the processed data as a .pkl file.</li>\n<li><strong>df</strong> (pandas.DataFrame):\nThe preprocessed and feature engineered data.</li>\n<li><strong>timestamp</strong> (str):\nThe current timestamp.</li>\n<li><strong>raw_data_path</strong> (pathlib.Path):\nThe path to the raw data file.</li>\n<li><strong>interim_data_path</strong> (pathlib.Path):\nThe path to the interim data file.</li>\n<li><strong>processed_data_path</strong> (pathlib.Path):\nThe path to the processed data file.</li>\n<li><strong>train_test_data_dir</strong> (pathlib.Path):\nThe path to the directory containing the .pkl files.</li>\n<li><strong>raw_data_id</strong> (str):\nThe ID of the raw data.</li>\n<li><strong>preprocessor</strong> (DataPreprocessor):\nThe DataPreprocessor object used to preprocess the raw data.</li>\n<li><strong>feature_engineer</strong> (FeatureEngineer):\nThe FeatureEngineer object used to engineer features from the preprocessed data.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>load_and_preprocess_data(save_data)\n    Loads the raw data and performs preprocessing and feature engineering steps.\nprepare_rnn_data(df, sequence_length, split_ratio, rand_oversample, save_train_test)\n    Prepares the train and test datasets for the RNN model.\nget_rnn_data(load_train_test, sequence_length, split_ratio, save_train_test, save_data)\n    Provides an interface for either loading preprocessed data or preprocessing raw data, performing feature engineering, preparing sequences and train-test splits, and saving the processed data and train-test splits.\n_prep_train_test_seqs(df, sequence_length, split_ratio)\n    Prepares training and testing sequences for the RNN model.\n_create_seqs(data, sequence_length)\n    Creates sequences of length <code>sequence_length</code> from the input <code>data</code>.\n_perform_random_oversampling(X_train, Y_train)\n    Performs random oversampling to balance the class distribution.\n_load_train_test_data()\n    Loads the train and test datasets for the RNN model from 4 .pkl files.\n_save_train_test_data(X_train, Y_train, X_test, Y_test)\n    Saves the train and test datasets for the RNN model as .pkl files.</p>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This class provides an interface for either loading preprocessed data or preprocessing raw data, performing feature engineering, preparing sequences and train-test splits, and saving the processed data and train-test splits.</p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.__init__", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.__init__", "kind": "function", "doc": "<p>Initializes the RNNDataPrep object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pickle_path</strong> (str):\nThe path to the .pkl file containing the raw data.</li>\n<li><strong>train_test_data_dir</strong> (str, optional):\nThe path to the directory containing the .pkl files, by default 'data/processed/rnn_input/'</li>\n<li><strong>save_train_test</strong> (bool, optional):\nWhether to save the train and test datasets as .pkl files. Defaults to False.</li>\n<li><strong>save_data</strong> (bool, optional):\nWhether to save the processed data as a .pkl file. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pickle_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data/interim/ff-mw.pkl&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">train_test_data_par_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data/processed/rnn_input/&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_train_test</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.pickle_path", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.pickle_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.train_test_data_par_dir", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.train_test_data_par_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.save_train_test", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.save_train_test", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.save_data", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.save_data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.df", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.df", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.timestamp", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.timestamp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.raw_data_path", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.raw_data_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.interim_data_path", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.interim_data_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.processed_data_path", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.processed_data_path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.train_test_data_dir", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.train_test_data_dir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.raw_data_id", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.raw_data_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.preprocessor", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.preprocessor", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.feature_engineer", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.feature_engineer", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.test_indices", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.test_indices", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.load_and_preprocess_data", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.load_and_preprocess_data", "kind": "function", "doc": "<p>Loads the raw data and performs preprocessing and feature engineering steps.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>save_data</strong> (bool, optional):\nWhether to save the processed data as a .pkl file. Defaults to None, in which case the value of self.save_data is used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: The preprocessed and feature engineered data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.get_rnn_data", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.get_rnn_data", "kind": "function", "doc": "<p>Provides an interface for either loading preprocessed data or preprocessing raw data, performing feature engineering, preparing sequences and train-test splits, and saving the processed data and train-test splits.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>load_train_test</strong> (bool, optional):\nWhether to load preprocessed data or preprocess raw data. Defaults to False.</li>\n<li><strong>sequence_length</strong> (int, optional):\nThe length of the sequences to create. Defaults to 3.</li>\n<li><strong>split_ratio</strong> (float, optional):\nThe ratio of training to testing data. Defaults to 2/3.</li>\n<li><strong>save_train_test</strong> (bool, optional):\nWhether to save the train and test datasets as .pkl files. Defaults to None, in which case the value of self.save_train_test is used.</li>\n<li><strong>save_data</strong> (bool, optional):\nWhether to save the processed data as a .pkl file. Defaults to None, in which case the value of self.save_data is used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]</strong>: The train-test splits as (X_train, Y_train, X_test, Y_test).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">load_train_test</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sequence_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">split_ratio</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.6666666666666666</span>,</span><span class=\"param\">\t<span class=\"n\">save_train_test</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">save_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.data_preprocess.rnn_data_prep.RNNDataPrep.prepare_rnn_data", "modulename": "src.data_preprocess.rnn_data_prep", "qualname": "RNNDataPrep.prepare_rnn_data", "kind": "function", "doc": "<p>Prepares the train and test datasets for the RNN model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pandas.DataFrame):\nThe DataFrame to use for preparing the train and test datasets.</li>\n<li><strong>sequence_length</strong> (int, optional):\nThe length of the sequences to create. Defaults to 3.</li>\n<li><strong>split_ratio</strong> (float, optional):\nThe ratio of training to testing data. Defaults to 2/3.</li>\n<li><strong>rand_oversample</strong> (bool, optional):\nWhether to perform random oversampling to balance the class distribution. Defaults to False.</li>\n<li><strong>save_train_test</strong> (bool, optional):\nWhether to save the train and test datasets as .pkl files. Defaults to None, in which case the value of self.save_train_test is used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>X_train</strong> (numpy.ndarray):\nThe training input sequences.</li>\n<li><strong>Y_train</strong> (numpy.ndarray):\nThe training target values.</li>\n<li><strong>X_test</strong> (numpy.ndarray):\nThe testing input sequences.</li>\n<li><strong>Y_test</strong> (numpy.ndarray):\nThe testing target values.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">sequence_length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">split_ratio</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.6666666666666666</span>,</span><span class=\"param\">\t<span class=\"n\">rand_oversample</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_train_test</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.main", "modulename": "src.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.main.logger", "modulename": "src.main", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.main (WARNING)&gt;"}, {"fullname": "src.main.main", "modulename": "src.main", "qualname": "main", "kind": "function", "doc": "<p>Main function that performs data preprocessing, feature engineering, model training, and model saving.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models", "modulename": "src.models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.baseline_models", "modulename": "src.models.baseline_models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.helpers_rnn", "modulename": "src.models.helpers_rnn", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.helpers_rnn.logger", "modulename": "src.models.helpers_rnn", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.models.helpers_rnn (WARNING)&gt;"}, {"fullname": "src.models.helpers_rnn.plot_predicted_probabilities", "modulename": "src.models.helpers_rnn", "qualname": "plot_predicted_probabilities", "kind": "function", "doc": "<p>Plot the predicted probabilities using the _make_df_for_plotting(), _process_df_for_plotting(), and _calculate_and_plot_means() functions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">test_indices</span>, </span><span class=\"param\"><span class=\"n\">test_labels_and_probs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.helpers_rnn.save_model_and_config", "modulename": "src.models.helpers_rnn", "qualname": "save_model_and_config", "kind": "function", "doc": "<p>Saves the trained model and configuration settings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (torch.nn.Module):\nThe trained RNN model.</li>\n<li><strong>model_name</strong> (str):\nThe name of the model.</li>\n<li><strong>timestamp</strong> (str):\nThe timestamp to use in the output file names.</li>\n<li><strong>pickle_path</strong> (str):\nThe path to the input data pickle file.</li>\n<li><strong>processed_data_path</strong> (str):\nThe path to the processed data pickle file.</li>\n<li><strong>config</strong> (dict):\nThe configuration settings for the model.</li>\n<li><strong>model_dir</strong> (pathlib.Path):\nThe directory to save the trained model.</li>\n<li><strong>config_dir</strong> (pathlib.Path):\nThe directory to save the configuration settings.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span>,</span><span class=\"param\">\t<span class=\"n\">pickle_path</span>,</span><span class=\"param\">\t<span class=\"n\">processed_data_path</span>,</span><span class=\"param\">\t<span class=\"n\">config</span>,</span><span class=\"param\">\t<span class=\"n\">model_dir</span>,</span><span class=\"param\">\t<span class=\"n\">config_dir</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.helpers_rnn.debug_input_nan_inf", "modulename": "src.models.helpers_rnn", "qualname": "debug_input_nan_inf", "kind": "function", "doc": "<p>Checks for NaN and inf values in the input tensor.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>inputs</strong> (torch.Tensor):\nThe input tensor.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">inputs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.helpers_rnn.debug_sumsq_grad_param", "modulename": "src.models.helpers_rnn", "qualname": "debug_sumsq_grad_param", "kind": "function", "doc": "<p>Computes the sum of squared gradients and parameters for a given model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (torch.nn.Module):\nThe model to compute the sum of squared gradients and parameters for.</li>\n<li><strong>sum_sq_gradients</strong> (float):\nThe current sum of squared gradients.</li>\n<li><strong>sum_sq_parameters</strong> (float):\nThe current sum of squared parameters.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>sum_sq_gradients</strong> (float):\nThe updated sum of squared gradients.</li>\n<li><strong>sum_sq_parameters</strong> (float):\nThe updated sum of squared parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">sum_sq_gradients</span>, </span><span class=\"param\"><span class=\"n\">sum_sq_parameters</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.helpers_rnn.debug_grad_nan_inf", "modulename": "src.models.helpers_rnn", "qualname": "debug_grad_nan_inf", "kind": "function", "doc": "<p>Checks for NaN and inf values in the gradients of a given model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (torch.nn.Module):\nThe model to check the gradients of.</li>\n<li><strong>epoch</strong> (int):\nThe current epoch number.</li>\n<li><strong>i</strong> (int):\nThe current iteration number.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">epoch</span>, </span><span class=\"param\"><span class=\"n\">i</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.helpers_rnn.debug_loss_nan_inf", "modulename": "src.models.helpers_rnn", "qualname": "debug_loss_nan_inf", "kind": "function", "doc": "<p>Checks for NaN and inf values in the loss value.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>epoch</strong> (int):\nThe current epoch number.</li>\n<li><strong>i</strong> (int):\nThe current iteration number.</li>\n<li><strong>loss</strong> (torch.Tensor):\nThe loss value.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">epoch</span>, </span><span class=\"param\"><span class=\"n\">i</span>, </span><span class=\"param\"><span class=\"n\">loss</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.rnn_model", "modulename": "src.models.rnn_model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.rnn_model.logger", "modulename": "src.models.rnn_model", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.models.rnn_model (WARNING)&gt;"}, {"fullname": "src.models.rnn_model.RNN", "modulename": "src.models.rnn_model", "qualname": "RNN", "kind": "class", "doc": "<p>A class representing the RNN model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_size</strong> (int):\nThe number of expected features in the input.</li>\n<li><strong>hidden_size</strong> (int):\nThe number of features in the hidden state.</li>\n<li><strong>output_size</strong> (int):\nThe number of output features.</li>\n<li><strong>batch_first</strong> (bool, optional):\nIf True, then the input and output tensors are provided as (batch, seq, feature).\nDefault is True.</li>\n</ul>\n", "bases": "torch.nn.modules.module.Module"}, {"fullname": "src.models.rnn_model.RNN.__init__", "modulename": "src.models.rnn_model", "qualname": "RNN.__init__", "kind": "function", "doc": "<p>Initialize the RNN model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_size</strong> (int):\nThe number of expected features in the input.</li>\n<li><strong>hidden_size</strong> (int):\nThe number of features in the hidden state.</li>\n<li><strong>output_size</strong> (int):\nThe number of output features.</li>\n<li><strong>batch_first</strong> (bool, optional):\nIf True, then the input and output tensors are provided as (batch, seq, feature).\nDefault is True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_size</span>, </span><span class=\"param\"><span class=\"n\">hidden_size</span>, </span><span class=\"param\"><span class=\"n\">output_size</span>, </span><span class=\"param\"><span class=\"n\">batch_first</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "src.models.rnn_model.RNN.timestamp", "modulename": "src.models.rnn_model", "qualname": "RNN.timestamp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.rnn_model.RNN.hidden_size", "modulename": "src.models.rnn_model", "qualname": "RNN.hidden_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.rnn_model.RNN.rnn", "modulename": "src.models.rnn_model", "qualname": "RNN.rnn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.rnn_model.RNN.fc", "modulename": "src.models.rnn_model", "qualname": "RNN.fc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.rnn_model.RNN.sigmoid", "modulename": "src.models.rnn_model", "qualname": "RNN.sigmoid", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.rnn_model.RNN.forward", "modulename": "src.models.rnn_model", "qualname": "RNN.forward", "kind": "function", "doc": "<p>Forward pass of the RNN model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong> (torch.Tensor):\nThe input data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>torch.Tensor</strong>: The output data.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Using <code>.to(x.device)</code> in the <code>forward()</code> method ensures that the model\n    is moved to the same device as the input data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.rnn_model.WalkDataset", "modulename": "src.models.rnn_model", "qualname": "WalkDataset", "kind": "class", "doc": "<p>A class representing the dataset.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (numpy.ndarray):\nThe input data.</li>\n<li><strong>Y</strong> (numpy.ndarray):\nThe target data.</li>\n</ul>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "src.models.rnn_model.WalkDataset.__init__", "modulename": "src.models.rnn_model", "qualname": "WalkDataset.__init__", "kind": "function", "doc": "<p>Initialize the dataset.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X</strong> (numpy.ndarray):\nThe input data.</li>\n<li><strong>Y</strong> (numpy.ndarray):\nThe target data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">Y</span></span>)</span>"}, {"fullname": "src.models.rnn_model.WalkDataset.X", "modulename": "src.models.rnn_model", "qualname": "WalkDataset.X", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.rnn_model.WalkDataset.Y", "modulename": "src.models.rnn_model", "qualname": "WalkDataset.Y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.models.rnn_model.init_param_weights", "modulename": "src.models.rnn_model", "qualname": "init_param_weights", "kind": "function", "doc": "<p>Optional function for weight initialization.</p>\n\n<p>Uses Xavier uniform initialization for weights and constant initialization\nfor biases.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>m</strong> (torch.nn.Module):\nThe module to initialize. Only applies to Linear layers.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">m</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.rnn_model.data_loaders", "modulename": "src.models.rnn_model", "qualname": "data_loaders", "kind": "function", "doc": "<p>Loads the training and testing data into PyTorch DataLoader objects.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X_train</strong> (numpy.ndarray):\nThe training input data.</li>\n<li><strong>Y_train</strong> (numpy.ndarray):\nThe training target data.</li>\n<li><strong>X_test</strong> (numpy.ndarray):\nThe testing input data.</li>\n<li><strong>Y_test</strong> (numpy.ndarray):\nThe testing target data.</li>\n<li><strong>batch_size</strong> (int):\nThe batch size.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>train_loader</strong> (torch.utils.data.DataLoader):\nThe training data loader.</li>\n<li><strong>test_loader</strong> (torch.utils.data.DataLoader):\nThe testing data loader.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">Y_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">Y_test</span>, </span><span class=\"param\"><span class=\"n\">batch_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.rnn_model.loss_function", "modulename": "src.models.rnn_model", "qualname": "loss_function", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Y_train</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.rnn_model.configure_model", "modulename": "src.models.rnn_model", "qualname": "configure_model", "kind": "function", "doc": "<p>Configures an RNN model for training.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_size</strong> (int):\nThe number of expected features in the input.</li>\n<li><strong>hidden_size</strong> (int):\nThe number of features in the hidden state.</li>\n<li><strong>output_size</strong> (int):\nThe number of output features.</li>\n<li><strong>learning_rate</strong> (float):\nThe learning rate.</li>\n<li><strong>device</strong> (str):\nThe device to use for training.</li>\n<li><strong>batch_first</strong> (bool, optional):\nIf True, then the input and output tensors are provided as (batch, seq, feature).\nDefault is True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>model</strong> (torch.nn.Module):\nThe RNN model.</li>\n<li><strong>criterion</strong> (torch.nn.modules.loss._Loss):\nThe loss function.</li>\n<li><strong>optimizer</strong> (torch.optim.Optimizer):\nThe optimizer.</li>\n<li><strong>scheduler</strong> (torch.optim.lr_scheduler._LRScheduler):\nThe learning rate scheduler.</li>\n<li><strong>cross_entropy_weights</strong> (torch.Tensor):\nThe weights for the CrossEntropyLoss function.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Y_train</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span>,</span><span class=\"param\">\t<span class=\"n\">hidden_size</span>,</span><span class=\"param\">\t<span class=\"n\">output_size</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span>,</span><span class=\"param\">\t<span class=\"n\">device</span>,</span><span class=\"param\">\t<span class=\"n\">batch_first</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.train_eval", "modulename": "src.models.train_eval", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.train_eval.logger", "modulename": "src.models.train_eval", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.models.train_eval (WARNING)&gt;"}, {"fullname": "src.models.train_eval.train_eval_model", "modulename": "src.models.train_eval", "qualname": "train_eval_model", "kind": "function", "doc": "<p>Trains the RNN model.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>X_train</strong> (numpy.ndarray):\nThe training input data.</li>\n<li><strong>Y_train</strong> (numpy.ndarray):\nThe training target data.</li>\n<li><strong>X_test</strong> (numpy.ndarray):\nThe testing input data.</li>\n<li><strong>Y_test</strong> (numpy.ndarray):\nThe testing target data.</li>\n<li><strong>input_size</strong> (int):\nThe number of expected features in the input.</li>\n<li><strong>hidden_size</strong> (int):\nThe number of features in the hidden state.</li>\n<li><strong>output_size</strong> (int):\nThe number of output features.</li>\n<li><strong>num_epochs</strong> (int):\nThe number of epochs to train the model.</li>\n<li><strong>batch_size</strong> (int):\nThe batch size.</li>\n<li><strong>learning_rate</strong> (float):\nThe learning rate.</li>\n<li><strong>device</strong> (str):\nThe device to use for training.</li>\n<li><strong>batch_first</strong> (bool, optional):\nIf True, then the input and output tensors are provided as (batch, seq, feature).\nDefault is True.</li>\n<li><strong>prints_per_epoch</strong> (int, optional):\nThe number of times to print the loss per epoch. Default is 10.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>model</strong> (torch.nn.Module):\nThe trained RNN model.</li>\n<li><strong>labels_and_probs</strong> (numpy.ndarray):\nA numpy array containing the true labels, predicted labels, and predicted probabilities.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X_train</span>,</span><span class=\"param\">\t<span class=\"n\">Y_train</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span>,</span><span class=\"param\">\t<span class=\"n\">Y_test</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span>,</span><span class=\"param\">\t<span class=\"n\">hidden_size</span>,</span><span class=\"param\">\t<span class=\"n\">output_size</span>,</span><span class=\"param\">\t<span class=\"n\">num_epochs</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span>,</span><span class=\"param\">\t<span class=\"n\">device</span>,</span><span class=\"param\">\t<span class=\"n\">batch_first</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">prints_per_epoch</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.train_eval.train_loop", "modulename": "src.models.train_eval", "qualname": "train_loop", "kind": "function", "doc": "<p>Trains an RNN model on a training dataset for one epoch.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (torch.nn.Module):\nThe RNN model to train.</li>\n<li><strong>batch_size</strong> (int):\nThe batch size.</li>\n<li><strong>device</strong> (str):\nThe device to use for training.</li>\n<li><strong>prints_per_epoch</strong> (int):\nThe number of times to print the loss per epoch.</li>\n<li><strong>train_loader</strong> (torch.utils.data.DataLoader):\nThe training data loader.</li>\n<li><strong>criterion</strong> (torch.nn.modules.loss._Loss):\nThe loss function.</li>\n<li><strong>optimizer</strong> (torch.optim.Optimizer):\nThe optimizer.</li>\n<li><strong>epoch</strong> (int):\nThe current epoch number.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>train_loss</strong> (float):\nThe average training loss over all batches.</li>\n<li><strong>train_f1</strong> (float):\nThe training F1 score.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span>,</span><span class=\"param\">\t<span class=\"n\">device</span>,</span><span class=\"param\">\t<span class=\"n\">prints_per_epoch</span>,</span><span class=\"param\">\t<span class=\"n\">train_loader</span>,</span><span class=\"param\">\t<span class=\"n\">criterion</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span>,</span><span class=\"param\">\t<span class=\"n\">epoch</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.train_eval.test_loop", "modulename": "src.models.train_eval", "qualname": "test_loop", "kind": "function", "doc": "<p>Evaluates the performance of a trained RNN model on a test dataset.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong> (torch.nn.Module):\nThe trained RNN model.</li>\n<li><strong>device</strong> (str):\nThe device to use for evaluation.</li>\n<li><strong>test_loader</strong> (torch.utils.data.DataLoader):\nThe test data loader.</li>\n<li><strong>criterion</strong> (torch.nn.modules.loss._Loss):\nThe loss function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>test_loss</strong> (float):\nThe average test loss over all batches.</li>\n<li><strong>test_acc</strong> (float):\nThe test accuracy.</li>\n<li><strong>test_f1</strong> (float):\nThe test F1 score.</li>\n<li><strong>test_pr_auc</strong> (float):\nThe test precision-recall AUC score.</li>\n<li><strong>labels_and_probs</strong> (numpy.ndarray):\nA numpy array containing the true labels, predicted labels, and predicted probabilities.</li>\n<li><strong>TODO</strong> (Check/integrate changes from FD.):</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">device</span>, </span><span class=\"param\"><span class=\"n\">test_loader</span>, </span><span class=\"param\"><span class=\"n\">criterion</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.utils", "modulename": "src.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.utils.utilities", "modulename": "src.utils.utilities", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.utils.utilities.logger", "modulename": "src.utils.utilities", "qualname": "logger", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Logger src.utils.utilities (WARNING)&gt;"}, {"fullname": "src.utils.utilities.get_hash", "modulename": "src.utils.utilities", "qualname": "get_hash", "kind": "function", "doc": "<p>Returns the hash value of an object as a string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obj</strong> (object):\nThe object to hash.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>str</strong>: The hash value of the object as a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.utils.utilities.create_config_dict", "modulename": "src.utils.utilities", "qualname": "create_config_dict", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_name</span>,</span><span class=\"param\">\t<span class=\"n\">input_size</span>,</span><span class=\"param\">\t<span class=\"n\">hidden_size</span>,</span><span class=\"param\">\t<span class=\"n\">output_size</span>,</span><span class=\"param\">\t<span class=\"n\">num_epochs</span>,</span><span class=\"param\">\t<span class=\"n\">batch_size</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span>,</span><span class=\"param\">\t<span class=\"n\">raw_data_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">interim_data_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">processed_data_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">logging_level</span><span class=\"o\">=</span><span class=\"s1\">&#39;INFO&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">logging_format</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%(asctime)s</span><span class=\"s1\"> - </span><span class=\"si\">%(levelname)s</span><span class=\"s1\"> - </span><span class=\"si\">%(message)s</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.utils.utilities.engineer_features", "modulename": "src.utils.utilities", "qualname": "engineer_features", "kind": "function", "doc": "<p>Performs feature engineering steps on the input DataFrame.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>df</strong> (pandas.DataFrame):\nThe input DataFrame.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: The feature-engineered DataFrame.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();